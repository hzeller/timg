.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "timg" "1" "Feb 2021" "" ""
.hy
.SH NAME
.PP
timg - A terminal image and video viewer
.SH SYNOPSIS
.PP
\f[B]timg\f[R] [<\f[I]options\f[R]> <\f[I]image/video\f[R]>
[<\f[I]image/video\f[R]>\&...]
.SH DESCRIPTION
.PP
Show images, play animated gifs, scroll static images or play videos in
the terminal.
Even show PDFs if needed.
.PP
Useful if you want to have a quick visual check without leaving the
comfort of your shell and having to start a bulky image viewer.
Sometimes this is the only way if your terminal is connected remotely
via ssh.
And of course if you don\[cq]t need the resolution.
While icons typically fit pixel-perfect, larger images are scaled down
to match the resolution.
.PP
The command line accepts any number of image/video filenames that it
shows in sequence one per page or in a grid in multiple columns,
depending on your choice of \f[B]--grid\f[R].
The output is emitted in-line with minimally messing with your terminal,
so you can simply go back in history using your terminals\[cq]
scroll-bar (Or redirecting the output to a file allows you to later
simply \f[B]cat\f[R] that file to your terminal.
Even \f[B]less -R\f[R] seems to be happy with such output).
.PP
The special filename \[lq]-\[rq] stands for standard input, so you can
read an image from a pipe.
If the input from a pipe is a video, use the \f[B]-V\f[R] option (see
below).
.PP
Under the hood, timg uses GraphicsMagick to open and decode a wide range
of image formats.
It also uses libav to decode and play videos or images from files and
URLs.
With \f[B]-I\f[R] or \f[B]-V\f[R] you can choose to use only one of
these file decoders (GraphicsMagick or libav respectively).
.SH OPTIONS
.SS General Options
.TP
\f[B]-g\f[R] \f[I]<width>x<height>\f[R]
Output image to fit inside given geometry.
By default, the size is determined by the available space in the
terminal.
The image is scaled to fit inside the available box to fill the screen;
see \f[B]-W\f[R] if you want to fill the width.
.TP
\f[B]-p\f[R] \f[I]<[h|q|k|i]>\f[R], \f[B]--pixelation\f[R]=\f[I][h|q|k|i]\f[R]
Choice for pixelation of the content.
Value `h' chooses unicode half block characters, while `q' chooses
quarter blocks.
The choice `k' chooses kitty-graphics protocol, `i' the iTerm2 graphics
protocol.
.RS
.PP
Half blocks have a pixel aspect ratio of about 1:1 and allow to
represent colors correctly, but they look more `blocky'.
.PP
Quarter blocks will have a pixel aspect ratio of 1:2 (timg will stretch
the picture accordingly, no worries), and can only represent colors
approximately, as the four quadrant sub-pixels can only be foreground or
background color.
This increases the spatial resolution in x-direction at expense of
slight less color accuracy.
It makes it look less `blocky' and usually better.
.PP
There are terminal emulators that allow to display high-resolution
pictures.
If timg is detecting to run in a Kitty, iTerm2 or WezTerm, the
corresponding mode is auto-selected.
You can choose the modes explicitly with -pk (Kitty) or -pi (iTerm2
protocol, also implemented by WezTerm).
.PP
Default is `quarter' unless the terminal is graphics-capable.
.RE
.TP
\f[B]--compress\f[R]
For the graphics modes: this switches on compression for the
transmission to the terminal.
This uses more CPU on timg, but is desirable when connected over a slow
network.
.TP
\f[B]-C\f[R], \f[B]--center\f[R]
Center image(s) and title(s) horizontally.
.TP
\f[B]-W\f[R], \f[B]--fit-width\f[R]
Scale to fit width of the available space.
This means that the height can overflow, e.g.\ be longer than the
terminal, so might require scrolling to see the full picture.
Default behavior is to fit within the allotted width \f[I]and\f[R]
height.
.TP
\f[B]--grid\f[R]=<\f[I]cols\f[R]>[x<\f[I]rows\f[R]>]
Arrange images in a grid.
If only one parameter is given, arranges in a square grid
(e.g.\ \f[B]--grid=3\f[R] makes a 3x3 grid).
Alternatively, you can choose columns and rows that should fit on one
terminal (e.g.\ \f[B]--grid=3x2\f[R])
.TP
\f[B]-w\f[R] <\f[I]seconds\f[R]>
Wait time between images when multiple images are given on the command
line.
Fractional values are allowed, so \f[B]-w3.1415\f[R] would wait
approximately \[*p] seconds between images.
.TP
\f[B]-a\f[R]
Switch off anti aliasing.
The images are scaled down to show on the minimal amount of pixels, so
some smoothing is applied for best visual effect.
This switches off that smoothing.
.TP
\f[B]-b\f[R] <\f[I]background-color\f[R]>
Set the background color for transparent images.
Common HTML/SVG/X11 color strings are supported, such as
\f[B]purple\f[R], *\f[B]#00ff00\f[R] or \f[B]rgb(0, 0, 255)\f[R].
.RS
.PP
As a `special' color, \f[B]auto\f[R] is allowed, which attempts to query
the terminal for its background color (Best effort; not all terminals
support that).
If detection fails, the fallback is `black'.
.PP
The special value \f[B]none\f[R] switches off blending background color.
.RE
.TP
\f[B]-B\f[R] <\f[I]checkerboard-other-color\f[R]>
Show the background of a transparent image in a checkerboard pattern
with the given color, which alternates with the \f[B]-b\f[R] color.
Supported color specifications like in \f[B]-b\f[R].
.TP
\f[B]--pattern-size\f[R]=<\f[I]size-factor\f[R]>
Scale background checkerboard pattern by this factor.
.TP
\f[B]--auto-crop\f[R][=<\f[I]pre-crop\f[R]>]
Trim same-color pixels around the border of image before displaying.
Use this if there is a boring even-colored space aorund the image which
uses too many of our available few pixels.
.RS
.PP
The optional pre-crop is number of pixels to unconditionally trim all
around the original image, for instance to remove a thin border.
The link in the EXAMPLES section shows an example how this improves
showing an xkcd comic with a border.
.RE
.TP
\f[B]--rotate\f[R]=<\f[I]exif\f[R]|\f[I]off\f[R]>
If `exif', rotate the image according to the exif data stored in the
image.
With `off', no rotation is extracted or applied.
.TP
\f[B]--clear\f[R]
Clear screen before \f[I]first\f[R] image.
This places the image at the top of the screen.
.RS
.PP
There is an optional parameter `\f[I]every\f[R]'
(\f[B]--clear=every\f[R]), which will clean the screen before every
image.
This only makes sense if there is no \f[B]--grid\f[R] used and if you
allow some time to show the image of course, so good in combination with
\f[B]-w\f[R].
.RE
.TP
\f[B]-U\f[R], \f[B]--upscale=[i]\f[R]
Allo Upscaling.
If an image is smaller than the terminal size, scale it up to fit the
terminal.
.RS
.PP
By default, larger images are only scaled down and images smaller than
the available pixels in the terminal are left at the original size (this
helps assess small deliberately pixelated images such as icons in their
intended appearance).
This option scales up smaller images to fit available space.
.PP
The long option allows for an optional parameter \f[B]--upscale=i\f[R]
that forces the upscaling to be in integer increments to keep the
`blocky' appearance of an upscaled image without bilinear scale
`fuzzing'.
.RE
.TP
\f[B]-V\f[R]
This is a video, directly read the content as video and don\[cq]t
attempt to probe image decoding first.
.RS
.PP
Usually, timg will first attempt to interpret the data as image, but if
it that fails, will fall-back to try interpret the file as video.
However, if the file is coming from stdin, the first bytes used to probe
for the image have already been consumed so the fall-back would fail in
that case\&... Arguably, this should be dealt with automatically but
isn\[cq]t :)
.PP
Long story short: if you read a video from a pipe, use \f[B]-V\f[R].
See link in EXAMPLES section for a an example.
.RE
.TP
\f[B]-I\f[R]
This is an image, don\[cq]t attempt to fall back to video decoding.
Somewhat the opposite of \f[B]-V\f[R].
.TP
\f[B]-F\f[R], \f[B]--title\f[R]
Print filename as title above each image.
.TP
\f[B]-f\f[R] <\f[I]filelist-file\f[R]>
Read a list of image filenames to show from this file.
The list needs to be newline separated.
This option can be supplied multiple times in which case it appends to
the end of the list of images to show.
If there are also filenames on the command line, they will be shown at
the very end.
.RS
.PP
Absolute filenames in the list are used as-is, relative filenames are
resolved relative to the filelist-file itself.
.RE
.TP
\f[B]-o\f[R] <\f[I]outfile\f[R]>
Write terminal image to given filename instead of stdout.
.TP
\f[B]-E\f[R]
Don\[cq]t hide the cursor while showing images.
.TP
\f[B]--threads\f[R]=<\f[I]n\f[R]>
Run image decoding in parallel with n threads.
By default, half the reported CPU-cores are used.
.TP
\f[B]--version\f[R]
Print version and exit.
.TP
\f[B]-h\f[R], \f[B]--help\f[R]
Print command line option help and exit.
.SS For Animations, Scrolling, or Video
.PP
Usually, animations are shown in full in an infinite loop.
These options limit infinity.
.TP
\f[B]-t\f[R]<\f[I]seconds\f[R]>
Stop an animation after these number of seconds.
Fractional values are allowed.
.TP
\f[B]--loops\f[R]=<\f[I]num\f[R]>
Number of loops through a fully cycle of an animation or video.
A value of \f[I]-1\f[R] stands for `forever'.
.RS
.PP
If \f[I]not\f[R] set, videos loop once, animated images forever unless
there is more than one file to show.
If there are multiple files on the command line, animated images are
only shown once if \f[B]--loops\f[R] is not set to prevent the output
get stuck on the first animation.
.RE
.TP
\f[B]--frames\f[R]=<\f[I]frame-count\f[R]>
Only render the first \f[I]frame-count\f[R] frames in an animation or
video.
If frame-count is set to 1, the output behaves like a static image.
.SS Scrolling
.TP
\f[B]--scroll\f[R][=<\f[I]ms\f[R]>]
Scroll horizontally with an optional delay between updates (default:
60ms).
In the EXAMPLES section is an example how to use ImageMagick to create a
text that you then can scroll with \f[B]timg\f[R] over the terminal.
.TP
\f[B]--delta-move\f[R]=<\f[I]dx\f[R]>:<\f[I]dy\f[R]>
Scroll with delta x and delta y.
The default of 1:0 scrolls it horizontally, but with this option you can
scroll vertically or even diagonally.
.SH RETURN VALUES
.PP
Exit code is
.TP
\f[B]0\f[R]
On reading and displaying all images successfully.
.TP
\f[B]1\f[R]
If any of the images could not be read or decoded or if there was no
image provided.
.TP
\f[B]2\f[R]
If an invalid option or parameter was provided.
.TP
\f[B]3\f[R]
If timg could not determine the size of terminal (not a tty?).
Provide \f[B]-g\f[R] option to provide size of the output to be
generated.
.TP
\f[B]4\f[R]
Could not write to output file provided with \f[B]-o\f[R].
.TP
\f[B]5\f[R]
Could not read file list file provided with \f[B]-f\f[R].
.SH ENVIRONMENT
.TP
\f[B]TIMG_USE_UPPER_BLOCK\f[R]
If this environment variable is set to the value \f[B]1\f[R], timg will
use the U+2580 - `Upper Half Block' (\[u2580]) Unicode character.
.RS
.PP
To display pixels, timg uses a Unicode half block and sets the
foreground color and background color to get two vertical pixels.
By default, it uses the U+2584 - `Lower Half Block' (\[u2584]) character
to achieve this goal.
This has been chosen as it resulted in the best image in all tested
terminals (konsole, gnome terminal and cool-retro-term).
So usually, there is no need to change that.
But if the terminal or font result in a funny output, this might be
worth a try.
This is an environment variable because if it turns out to yield a
better result on your system, you can set it once in your profile and
forget about it.
.RE
.TP
\f[B]TIMG_FONT_WIDTH_CORRECT\f[R]
A floating point stretch factor in width direction to correct for fonts
that don\[cq]t produce quite square output.
.RS
.PP
If you notice that the image displayed is not quite the right aspect
ratio because of the font used, you can modify this factor to make it
look correct.
Increasing the visual width by 10% would be setting it to
\f[I]TIMG_FONT_WIDTH_CORRECT=1.1\f[R] for instance.
.PP
This is an environment variable, so that you can set it once to best fit
your terminal emulator of choice.
.RE
.TP
\f[B]TIMG_ALLOW_FRAME_SKIP\f[R]
Set this environment variable to 1 if you like to allow timg to drop
frames when play-back is falling behind.
This is particularly useful if you are on a very slow remote terminal
connection that can\[cq]t keep up with playing videos.
Or if you have a very slow CPU.
.SH EXAMPLES
.PP
Some example invocations including scrolling text or streaming an online
video are put together at <https://github.com/hzeller/timg#examples>
.SH KNOWN ISSUES
.PP
This requires a terminal that can deal with Unicode characters and 24
bit color escape codes.
This will be problematic on really old installations or if you want to
display images on some limited text console.
.PP
The option \f[B]-V\f[R] should not be necessary for streaming video from
stdin; timg should internally buffer bytes it uses for probing.
.SH BUGS
.PP
Report bugs to <http://github.com/hzeller/timg/issues>
.SH COPYRIGHT
.PP
Copyright (c) 2016..2021 Henner Zeller.
This program is free software, provided under the GNU GPL version 2.0 or
later <https://gnu.org/licenses/gpl.html>.
.SH SEE ALSO
.PP
GraphicsMagick, ffmpeg(1)
.SH AUTHORS
Henner Zeller.
